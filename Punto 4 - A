#include <iostream>
using namespace std;

class Nodo {
private:
    int dato;
    Nodo* sig;
public:
    Nodo(int dato) {
        this->dato = dato;
        this->sig = nullptr;
    }

    void setDato(int valor) {
        dato = valor;
    }

    int getDato() {
        return dato;
    }

    Nodo* getSiguiente() {
        return sig;
    }

    void setSiguiente(Nodo* nuevo) {
        sig = nuevo;
    }
};

class Pila {
private:
    Nodo* tope;
    int cant;
public:
    Pila() {
        tope = nullptr;
        cant = 0;
    }

    bool estaVacia() {
        return tope == nullptr;
    }

    void push(int valor) {
        Nodo* nuevo = new Nodo(valor);
        nuevo->setSiguiente(tope);
        tope = nuevo;
        cant++;
    }

    Nodo* pop() {
        Nodo* borrado = nullptr;
        if (!estaVacia()) {
            borrado = tope;
            tope = tope->getSiguiente();
            borrado->setSiguiente(nullptr);
            cant--;
        } else {
            cout << "Pila vacía, no se puede desapilar\n";
        }
        return borrado;
    }

    int top() {
        if (!estaVacia()) {
            return tope->getDato();
        } else {
            cout << "Pila vacía\n";
            return -1; // Indicador de error
        }
    }

    int getCantidad() {
        return cant;
    }

    void mostrarPila() {
        Nodo* i = tope;
        while (i != nullptr) {
            cout << i->getDato() << endl;
            i = i->getSiguiente();
        }
    }
};

int main() {
    Pila pila;

    pila.push(10);
    pila.push(20);
    pila.push(30);

    cout << "Contenido de la pila:\n";
    pila.mostrarPila();

    cout << "Tope: " << pila.top() << endl;

    Nodo* n = pila.pop();
    if (n != nullptr) {
        cout << "Desapilado: " << n->getDato() << endl;
        delete n;
    }

    cout << "Tope después de pop: " << pila.top() << endl;
    cout << "Cantidad en pila: " << pila.getCantidad() << endl;

    return 0;
}
